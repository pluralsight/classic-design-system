# DOCKER STAGE: BUILD
FROM node:11.4-alpine as builder

ENV NODE_ENV=production

## Install build toolchain, install node deps and compile native add-ons
RUN apk add --no-cache python make g++

## Use /usr/src/app subdir so root tsconfig can be extended
RUN mkdir -p /usr/src/app

COPY docs/. /usr/src/app
COPY tsconfig.json /usr/src

WORKDIR /usr/src/app

RUN yarn --ignore-engines

# DOCKER STAGE: APP
FROM node:11.4-alpine as app

ARG NEW_RELIC_APP_NAME=DesignSystemDocs::Production
ENV NEW_RELIC_APP_NAME $NEW_RELIC_APP_NAME

ARG NEW_RELIC_ENABLED=true
ENV NEW_RELIC_ENABLED $NEW_RELIC_ENABLED

ENV NEW_RELIC_LICENSE_KEY $NEW_RELIC_LICENSE_KEY

ENV NODE_ENV=production

ARG HOST=0.0.0.0
ENV HOST $HOST

ARG PORT=3000
ENV PORT $PORT

ENV TZ=America/Denver

ARG LOG_LEVEL=info
ENV LOG_LEVEL $LOG_LEVEL

RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

COPY --from=builder /usr/src/app/dist /usr/src/app/dist
COPY --from=builder /usr/src/app/public /usr/src/app/public
COPY --from=builder /usr/src/app/node_modules /usr/src/app/node_modules
COPY --from=builder /usr/src/app/package.json /usr/src/app/package.json
COPY --from=builder /usr/src/app/newrelic.js /usr/src/app/newrelic.js
COPY --from=builder /usr/src/app/health-check.js /usr/src/app/health-check.js

# the official node image provides an unprivileged user as a security best practice
# https://github.com/nodejs/docker-node/blob/master/docs/BestPractices.md#non-root-user
USER node

HEALTHCHECK --interval=5s --timeout=30s --retries=3 \
  CMD node /usr/src/app/health-check.js

CMD ["node", "./dist/server/main.js"]
